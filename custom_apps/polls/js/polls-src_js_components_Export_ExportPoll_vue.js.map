{"version":3,"file":"polls-src_js_components_Export_ExportPoll_vue.js?v=80ad557a87482fdd3498","mappings":"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","sources":["webpack://polls/./src/js/components/Export/ExportPoll.vue?8b1b","webpack:///polls/src/js/components/Export/ExportPoll.vue","webpack:///polls/src/js/components/Export/ExportPoll.vue?vue&type=script&lang=js&","webpack://polls/./src/js/components/Export/ExportPoll.vue?3ded"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"NcActions\",\n    {\n      scopedSlots: _vm._u([\n        {\n          key: \"icon\",\n          fn: function () {\n            return [_c(\"ExportIcon\")]\n          },\n          proxy: true,\n        },\n      ]),\n    },\n    [\n      _c(\n        \"NcActionButton\",\n        {\n          attrs: { \"close-after-click\": \"\" },\n          on: {\n            click: function ($event) {\n              return _vm.exportFile(\"xlsx\")\n            },\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"icon\",\n              fn: function () {\n                return [_c(\"ExcelIcon\")]\n              },\n              proxy: true,\n            },\n          ]),\n        },\n        [\n          _vm._v(\n            \" \" + _vm._s(_vm.t(\"polls\", \"Download Excel spreadsheet\")) + \" \"\n          ),\n        ]\n      ),\n      _c(\n        \"NcActionButton\",\n        {\n          attrs: { \"close-after-click\": \"\" },\n          on: {\n            click: function ($event) {\n              return _vm.exportFile(\"ods\")\n            },\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"icon\",\n              fn: function () {\n                return [_c(\"FileTableIcon\")]\n              },\n              proxy: true,\n            },\n          ]),\n        },\n        [\n          _vm._v(\n            \" \" +\n              _vm._s(_vm.t(\"polls\", \"Download Open Document spreadsheet\")) +\n              \" \"\n          ),\n        ]\n      ),\n      _c(\n        \"NcActionButton\",\n        {\n          attrs: { \"close-after-click\": \"\" },\n          on: {\n            click: function ($event) {\n              return _vm.exportFile(\"csv\")\n            },\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"icon\",\n              fn: function () {\n                return [_c(\"CsvIcon\")]\n              },\n              proxy: true,\n            },\n          ]),\n        },\n        [_vm._v(\" \" + _vm._s(_vm.t(\"polls\", \"Download CSV file\")) + \" \")]\n      ),\n      _c(\n        \"NcActionButton\",\n        {\n          attrs: { \"close-after-click\": \"\" },\n          on: {\n            click: function ($event) {\n              return _vm.exportFile(\"html\")\n            },\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"icon\",\n              fn: function () {\n                return [_c(\"XmlIcon\")]\n              },\n              proxy: true,\n            },\n          ]),\n        },\n        [_vm._v(\" \" + _vm._s(_vm.t(\"polls\", \"Download HTML file\")) + \" \")]\n      ),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<!--\r\n  - @copyright Copyright (c) 2018 René Gieling <github@dartcafe.de>\r\n  -\r\n  - @author René Gieling <github@dartcafe.de>\r\n  -\r\n  - @license GNU AGPL version 3 or any later version\r\n  -\r\n  - This program is free software: you can redistribute it and/or modify\r\n  - it under the terms of the GNU Affero General Public License as\r\n  - published by the Free Software Foundation, either version 3 of the\r\n  - License, or (at your option) any later version.\r\n  -\r\n  - This program is distributed in the hope that it will be useful,\r\n  - but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  - GNU Affero General Public License for more details.\r\n  -\r\n  - You should have received a copy of the GNU Affero General Public License\r\n  - along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n  -\r\n  -->\r\n\r\n<template lang=\"html\">\r\n\t<NcActions>\r\n\t\t<template #icon>\r\n\t\t\t<ExportIcon />\r\n\t\t</template>\r\n\t\t<NcActionButton close-after-click @click=\"exportFile('xlsx')\">\r\n\t\t\t<template #icon>\r\n\t\t\t\t<ExcelIcon />\r\n\t\t\t</template>\r\n\t\t\t{{ t('polls', 'Download Excel spreadsheet') }}\r\n\t\t</NcActionButton>\r\n\r\n\t\t<NcActionButton close-after-click @click=\"exportFile('ods')\">\r\n\t\t\t<template #icon>\r\n\t\t\t\t<FileTableIcon />\r\n\t\t\t</template>\r\n\t\t\t{{ t('polls', 'Download Open Document spreadsheet') }}\r\n\t\t</NcActionButton>\r\n\r\n\t\t<NcActionButton close-after-click @click=\"exportFile('csv')\">\r\n\t\t\t<template #icon>\r\n\t\t\t\t<CsvIcon />\r\n\t\t\t</template>\r\n\t\t\t{{ t('polls', 'Download CSV file') }}\r\n\t\t</NcActionButton>\r\n\r\n\t\t<NcActionButton close-after-click @click=\"exportFile('html')\">\r\n\t\t\t<template #icon>\r\n\t\t\t\t<XmlIcon />\r\n\t\t\t</template>\r\n\t\t\t{{ t('polls', 'Download HTML file') }}\r\n\t\t</NcActionButton>\r\n\t</NcActions>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport { saveAs } from 'file-saver'\r\nimport { utils as xlsxUtils, write as xlsxWrite } from 'xlsx'\r\nimport { NcActions, NcActionButton } from '@nextcloud/vue'\r\nimport ExcelIcon from 'vue-material-design-icons/MicrosoftExcel.vue'\r\nimport FileTableIcon from 'vue-material-design-icons/FileTableOutline.vue'\r\nimport CsvIcon from 'vue-material-design-icons/FileDelimited.vue'\r\nimport XmlIcon from 'vue-material-design-icons/Xml.vue'\r\nimport ExportIcon from 'vue-material-design-icons/FileDownloadOutline.vue'\r\nimport { PollsAPI } from '../../Api/polls.js'\r\n\r\nexport default {\r\n\tname: 'ExportPoll',\r\n\tcomponents: {\r\n\t\tNcActions,\r\n\t\tNcActionButton,\r\n\t\tCsvIcon,\r\n\t\tExcelIcon,\r\n\t\tFileTableIcon,\r\n\t\tExportIcon,\r\n\t\tXmlIcon,\r\n\t},\r\n\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tworkBook: [],\r\n\t\t\tsheetData: [],\r\n\t\t\temailAddresses: [],\r\n\t\t}\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\t...mapGetters({\r\n\t\t\tparticipants: 'poll/participantsVoted',\r\n\t\t\tgetVote: 'votes/getVote',\r\n\t\t\texplodeDates: 'options/explodeDates',\r\n\t\t}),\r\n\t\t...mapState({\r\n\t\t\tpoll: (state) => state.poll,\r\n\t\t\toptions: (state) => state.options,\r\n\t\t\tvotes: (state) => state.votes,\r\n\t\t\tisOwner: (state) => state.poll.acl.allowEdit,\r\n\t\t}),\r\n\r\n\t\tsheetName() {\r\n\t\t\t// Not allowed characters for the sheet name: : \\ / ? * [ ]\r\n\t\t\t// Strip them out\r\n\t\t\t// Stonger regex i.e. for file names: /[&/\\\\#,+()$~%.'\":*?<>{}]/g\r\n\t\t\tconst regex = /[\\\\/?*[\\]]/g\r\n\t\t\treturn this.poll.title.replaceAll(regex, '').slice(0, 31)\r\n\t\t},\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tasync exportFile(type) {\r\n\t\t\tconst participantsHeader = [t('polls', 'Participants')]\r\n\t\t\tconst fromHeader = [t('polls', 'From')]\r\n\t\t\tconst toHeader = [t('polls', 'To')]\r\n\t\t\tthis.workBook = xlsxUtils.book_new()\r\n\t\t\tthis.workBook.SheetNames.push(this.sheetName)\r\n\t\t\tthis.sheetData = []\r\n\r\n\t\t\tif (['html', 'xlsx', 'ods'].includes(type)) {\r\n\t\t\t\tthis.sheetData.push(\r\n\t\t\t\t\t[this.poll.title],\r\n\t\t\t\t\t[this.poll.description],\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isOwner) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tparticipantsHeader.push(t('polls', 'Email address'))\r\n\t\t\t\t\tfromHeader.push('')\r\n\t\t\t\t\ttoHeader.push('')\r\n\t\t\t\t\tconst response = await PollsAPI.getParticipantsEmailAddresses(this.$route.params.id)\r\n\t\t\t\t\tthis.emailAddresses = response.data\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tif (error.name === 'CanceledError') return\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.poll.type === 'textPoll') {\r\n\t\t\t\tthis.sheetData.push([\r\n\t\t\t\t\t...participantsHeader,\r\n\t\t\t\t\t...this.options.list.map((item) => item.text),\r\n\t\t\t\t])\r\n\r\n\t\t\t} else if (['csv'].includes(type)) {\r\n\t\t\t\tthis.sheetData.push([\r\n\t\t\t\t\t...participantsHeader,\r\n\t\t\t\t\t...this.options.list.map((option) => this.explodeDates(option).iso),\r\n\t\t\t\t])\r\n\r\n\t\t\t} else if (['html'].includes(type)) {\r\n\t\t\t\tthis.sheetData.push([\r\n\t\t\t\t\t...participantsHeader,\r\n\t\t\t\t\t...this.options.list.map((option) => this.explodeDates(option).raw),\r\n\t\t\t\t])\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.sheetData.push([\r\n\t\t\t\t\t...fromHeader,\r\n\t\t\t\t\t...this.options.list.map((option) => this.explodeDates(option).from.dateTime),\r\n\t\t\t\t])\r\n\t\t\t\tthis.sheetData.push([\r\n\t\t\t\t\t...toHeader,\r\n\t\t\t\t\t...this.options.list.map((option) => this.explodeDates(option).to.dateTime),\r\n\t\t\t\t])\r\n\t\t\t}\r\n\r\n\t\t\tif (['html', 'ods', 'xlsx'].includes(type)) {\r\n\t\t\t\tthis.addVotesArray('symbols')\r\n\t\t\t} else if (['csv'].includes(type)) {\r\n\t\t\t\tthis.addVotesArray('raw')\r\n\t\t\t} else {\r\n\t\t\t\tthis.addVotesArray()\r\n\t\t\t}\r\n\r\n\t\t\tconst workBookOutput = xlsxWrite(this.workBook, { bookType: type, type: 'binary' })\r\n\t\t\tsaveAs(new Blob([this.s2ab(workBookOutput)], { type: 'application/octet-stream' }), `poll.${type}`)\r\n\t\t},\r\n\r\n\t\taddVotesArray(style) {\r\n\t\t\tthis.participants.forEach((participant) => {\r\n\t\t\t\tconst votesLine = [participant.displayName]\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (this.isOwner) {\r\n\t\t\t\t\t\tvotesLine.push(this.emailAddresses.find((item) => item.displayName === participant.displayName).emailAddress)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.options.list.forEach((option, i) => {\r\n\t\t\t\t\t\tif (style === 'symbols') {\r\n\t\t\t\t\t\t\tvotesLine.push(this.getVote({ userId: participant.userId, option }).answerSymbol ?? '❌')\r\n\t\t\t\t\t\t} else if (style === 'raw') {\r\n\t\t\t\t\t\t\tvotesLine.push(this.getVote({ userId: participant.userId, option }).answer)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvotesLine.push(this.getVote({ userId: participant.userId, option }).answerTranslated ?? t('polls', 'No'))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tthis.sheetData.push(votesLine)\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// just skip this participant\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tconst workSheet = xlsxUtils.aoa_to_sheet(this.sheetData)\r\n\t\t\tthis.workBook.Sheets[this.sheetName] = workSheet\r\n\t\t},\r\n\r\n\t\ts2ab(s) {\r\n\t\t\tconst buf = new ArrayBuffer(s.length) // convert s to arrayBuffer\r\n\t\t\tconst view = new Uint8Array(buf) // create uint8array as viewer\r\n\t\t\tfor (let i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF // convert to octet\r\n\t\t\treturn buf\r\n\t\t},\r\n\t},\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ExportPoll.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ExportPoll.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ExportPoll.vue?vue&type=template&id=5af26ff0&lang=html&\"\nimport script from \"./ExportPoll.vue?vue&type=script&lang=js&\"\nexport * from \"./ExportPoll.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","scopedSlots","_u","key","fn","proxy","attrs","on","click","$event","exportFile","_v","_s","t","_withStripped","name","components","NcActions","NcActionButton","CsvIcon","ExcelIcon","FileTableIcon","ExportIcon","XmlIcon","data","workBook","sheetData","emailAddresses","computed","mapGetters","participants","getVote","explodeDates","mapState","poll","state","options","votes","isOwner","acl","allowEdit","sheetName","title","replaceAll","slice","methods","type","participantsHeader","fromHeader","toHeader","xlsxUtils","book_new","SheetNames","push","includes","description","response","PollsAPI","getParticipantsEmailAddresses","$route","params","id","error","list","map","item","text","option","iso","raw","from","dateTime","to","addVotesArray","workBookOutput","xlsxWrite","bookType","saveAs","Blob","s2ab","concat","style","forEach","participant","votesLine","displayName","find","emailAddress","i","_this$getVote$answerS","userId","answerSymbol","answer","_this$getVote$answerT","answerTranslated","e","workSheet","aoa_to_sheet","Sheets","s","buf","ArrayBuffer","length","view","Uint8Array","charCodeAt"],"sourceRoot":""}