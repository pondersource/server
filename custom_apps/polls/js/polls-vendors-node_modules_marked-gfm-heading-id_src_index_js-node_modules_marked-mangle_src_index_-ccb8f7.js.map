{"version":3,"file":"polls-vendors-node_modules_marked-gfm-heading-id_src_index_js-node_modules_marked-mangle_src_index_-ccb8f7.js?v=6e849bfa72c704e4ed47","mappings":"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","sources":["webpack:///polls/node_modules/github-slugger/index.js","webpack:///polls/node_modules/github-slugger/regex.js","webpack:///polls/node_modules/marked-gfm-heading-id/src/index.js","webpack:///polls/node_modules/marked-mangle/src/index.js","webpack:///polls/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import GithubSlugger from 'github-slugger';\nlet slugger;\n\nexport function gfmHeadingId({ prefix = '' } = {}) {\n  return {\n    headerIds: false, // prevent deprecation warning; remove this once headerIds option is removed\n    hooks: {\n      preprocess(src) {\n        slugger = new GithubSlugger();\n        return src;\n      }\n    },\n    renderer: {\n      heading(text, level, raw) {\n        raw = raw.toLowerCase().trim().replace(/<[!\\/a-z].*?>/ig, '');\n        return `<h${level} id=\"${prefix}${slugger.slug(raw)}\">${text}</h${level}>\\n`;\n      }\n    }\n  };\n}\n","export function mangle() {\n  return {\n    mangle: false, // remove this once mangle option is removed\n    walkTokens(token) {\n      if (token.type !== 'link') {\n        return;\n      }\n\n      if (!token.href.startsWith('mailto:')) {\n        return;\n      }\n\n      const email = token.href.substring(7);\n      const mangledEmail = mangleEmail(email);\n\n      token.href = `mailto:${mangledEmail}`;\n\n      if (token.tokens.length !== 1 || token.tokens[0].type !== 'text' || token.tokens[0].text !== email) {\n        return;\n      }\n\n      token.text = mangledEmail;\n      token.tokens[0].text = mangledEmail;\n    }\n  };\n}\n\nfunction mangleEmail(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n","/**\n * marked v5.1.1 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nclass Marked {\n  defaults = getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(Lexer.lex, Parser.parse);\n  parseInline = this.#parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n  Parser = Parser;\n  parser = Parser.parse;\n  Renderer = Renderer;\n  TextRenderer = TextRenderer;\n  Lexer = Lexer;\n  lexer = Lexer.lex;\n  Tokenizer = Tokenizer;\n  Slugger = Slugger;\n  Hooks = Hooks;\n\n  constructor(...args) {\n    this.use(...args);\n  }\n\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack };\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if (ext.renderer) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (ext.tokenizer) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args) => {\n            let ret = pack.renderer[prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args) => {\n            let ret = pack.tokenizer[prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks[prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer, parser) {\n    return (src, opt, callback) => {\n      if (typeof opt === 'function') {\n        callback = opt;\n        opt = null;\n      }\n\n      const origOpt = { ...opt };\n      opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(opt.silent, opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens;\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e);\n        }\n\n        const done = (err) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt);\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback(null, out);\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n\n  #onError(silent, async, callback) {\n    return (e) => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n\nconst markedInstance = new Marked(defaults);\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  markedInstance.setOptions(opt);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"names":["own","Object","hasOwnProperty","BananaSlug","constructor","this","occurrences","reset","slug","value","maintainCase","self","result","toLowerCase","replace","originalSlug","call","create","regex","slugger","gfmHeadingId","prefix","headerIds","hooks","preprocess","src","renderer","heading","text","level","raw","trim","mangle","walkTokens","token","type","href","startsWith","email","substring","mangledEmail","i","ch","out","l","length","charCodeAt","Math","random","toString","mangleEmail","tokens","getDefaults","async","baseUrl","breaks","extensions","gfm","headerPrefix","highlight","langPrefix","pedantic","sanitize","sanitizer","silent","smartypants","tokenizer","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","escape","html","encode","test","unescapeTest","unescape","_","n","charAt","String","fromCharCode","parseInt","caret","edit","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","prot","decodeURIComponent","e","indexOf","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","shift","pop","splice","push","c","invert","suffLen","currChar","slice","outputLink","cap","link","lexer","title","state","inLink","inlineTokens","Tokenizer","options","space","rules","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","_escapes","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","row","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","body","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","getNextSafeSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","parser","unshift","Hooks","Set","markdown","postprocess","markedInstance","setOptions","lexInline","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","prevHook","passThroughHooks","has","arg","Promise","resolve","then","origOpt","throwError","prototype","warn","checkDeprecations","done","err","pending","setTimeout","all","catch","message","msg","reject","marked"],"sourceRoot":""}